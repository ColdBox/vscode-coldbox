{
	"active": {
		"prefix": "active",
		"body": "\n/**\n * A cool ${1:EntityName} entity\n */\ncomponent persistent=\"true\" table=\"${2:TableName}\" extends=\"cborm.models.ActiveEntity\"{\n\n\t// Primary Key\n\tproperty name=\"id\" fieldtype=\"id\" column=\"id\" generator=\"${3:native}\";\n\t\n\t// Properties\n\t${0}\n\t\n\t// Validation\n\tthis.constraints = {\n\t\t// Example: age = { required=true, min=\"18\", type=\"numeric\" }\n\t};\n\n\t// Mementifier\n\tthis.memento = {\n\t\tdefaultIncludes = [ ],\n\t\tdefaultExcludes = [ ],\n\t\tneverInlucde \t= [ ]\n\t};\n\t\n\t/**\n\t * Constructor\n\t */\n\tfunction init(){\n\t\tsuper.init();\n\n\t\treturn this;\n\t}\n}\n\n",
		"description": "Create an Active ORM Entity",
		"scope": "source,text"
	},
	"cachebox-config": {
		"prefix": "cachebox-config",
		"body": "\n/**\n* CacheBox Configuration File\n*/\ncomponent{\n\t\n\tfunction configure(){\n\t\t\n\t\t// The CacheBox configuration structure DSL\n\t\tcacheBox = {\n\t\t\t// LogBox config already in coldbox app, not needed\n\t\t\t// logBoxConfig = \"coldbox.system.web.config.LogBox\", \n\t\t\t\n\t\t\t// The defaultCache has an implicit name \"default\" which is a reserved cache name\n\t\t\t// It also has a default provider of cachebox which cannot be changed.\n\t\t\t// All timeouts are in minutes\n\t\t\tdefaultCache = {\n\t\t\t\tobjectDefaultTimeout = 120, //two hours default\n\t\t\t\tobjectDefaultLastAccessTimeout = 30, //30 minutes idle time\n\t\t\t\tuseLastAccessTimeouts = true,\n\t\t\t\treapFrequency = 2,\n\t\t\t\tfreeMemoryPercentageThreshold = 0,\n\t\t\t\tevictionPolicy = \"LRU\",\n\t\t\t\tevictCount = 1,\n\t\t\t\tmaxObjects = 300,\n\t\t\t\tobjectStore = \"ConcurrentStore\", //guaranteed objects\n\t\t\t\tcoldboxEnabled = true\n\t\t\t},\n\t\t\t\n\t\t\t// Register all the custom named caches you like here\n\t\t\tcaches = {\n\t\t\t\t// Named cache for all coldbox event and view template caching\n\t\t\t\ttemplate = {\n\t\t\t\t\tprovider = \"coldbox.system.cache.providers.CacheBoxColdBoxProvider\",\n\t\t\t\t\tproperties = {\n\t\t\t\t\t\tobjectDefaultTimeout = 120,\n\t\t\t\t\t\tobjectDefaultLastAccessTimeout = 30,\n\t\t\t\t\t\tuseLastAccessTimeouts = true,\n\t\t\t\t\t\tfreeMemoryPercentageThreshold = 0,\n\t\t\t\t\t\treapFrequency = 2,\n\t\t\t\t\t\tevictionPolicy = \"LRU\",\n\t\t\t\t\t\tevictCount = 2,\n\t\t\t\t\t\tmaxObjects = 300,\n\t\t\t\t\t\tobjectStore = \"ConcurrentSoftReferenceStore\" //memory sensitive\n\t\t\t\t\t}\n\t\t\t\t}\t\t\n\t\t\t}\t\t\n\t\t};\n\t}\t\n\t\n\t\n}\n",
		"description": "CacheBox Configuration File (CaceBox.cfc)",
		"scope": "source,text"
	},
	"config": {
		"prefix": "config",
		"body": "\n/**\n * ColdBox Configuration File\n */\ncomponent{\n\t\n\t/**\n\t * Configure the ColdBox Application\n\t */\n\tfunction configure(){\n\n\t\t// coldbox directives\n\t\tcoldbox = {\n\t\t\t// Application Setup\n\t\t\tappName \t\t\t\t= getSystemSetting( \"APPNAME\", \"${1:Your App Name}\" ),\n\t\t\t\n\t\t\t// Development Settings\n\t\t\treinitPassword\t\t\t= \"\",\n\t\t\thandlersIndexAutoReload = true,\n\n\t\t\t// Implicit Events\n\t\t\tdefaultEvent\t\t\t= \"\",\n\t\t\trequestStartHandler\t\t= \"Main.onRequestStart\",\n\t\t\trequestEndHandler\t\t= \"\",\n\t\t\tapplicationStartHandler = \"Main.onAppInit\",\n\t\t\tapplicationEndHandler\t= \"\",\n\t\t\tsessionStartHandler \t= \"\",\n\t\t\tsessionEndHandler\t\t= \"\",\n\t\t\tmissingTemplateHandler\t= \"\",\n\n\t\t\t// Extension Points\n\t\t\tapplicationHelper \t\t\t= \"includes/helpers/ApplicationHelper.cfm\",\n\t\t\tviewsHelper\t\t\t\t\t= \"\",\n\t\t\tmodulesExternalLocation\t\t= [],\n\t\t\tviewsExternalLocation\t\t= \"\",\n\t\t\tlayoutsExternalLocation \t= \"\",\n\t\t\thandlersExternalLocation  \t= \"\",\n\t\t\trequestContextDecorator \t= \"\",\n\t\t\tcontrollerDecorator\t\t\t= \"\",\n\n\t\t\t// Error/Exception Handling\n\t\t\tinvalidHTTPMethodHandler \t= \"\",\n\t\t\texceptionHandler\t\t\t= \"main.onException\",\n\t\t\tinvalidEventHandler\t\t\t= \"\",\n\t\t\tcustomErrorTemplate\t\t\t= \"\",\n\n\t\t\t// Application Aspects\n\t\t\thandlerCaching \t\t\t= false,\n\t\t\teventCaching\t\t\t= false,\n\t\t\tviewCaching\t\t\t\t= false,\n\t\t\t// Will automatically do a mapDirectory() on your `models` for you.\n\t\t\tautoMapModels\t\t\t= true\n\t\t};\n\n\t\t// custom settings\n\t\tsettings = {\n\n\t\t};\n\n\t\t// environment settings, create a detectEnvironment() method to detect it yourself.\n\t\t// create a function with the name of the environment so it can be executed if that environment is detected\n\t\t// the value of the environment is a list of regex patterns to match the cgi.http_host.\n\t\tenvironments = {\n\t\t\tdevelopment = \"^localhost,127\\.0\\.0\\.1\"\n\t\t};\n\n\t\t// Module Directives\n\t\tmodules = {\n\t\t\t// An array of modules names to load, empty means all of them\n\t\t\tinclude = [],\n\t\t\t// An array of modules names to NOT load, empty means none\n\t\t\texclude = []\n\t\t};\n\n\t\t//LogBox DSL\n\t\tlogBox = {\n\t\t\t// Define Appenders\n\t\t\tappenders = {\n\t\t\t\tconsole = { class=\"coldbox.system.logging.appenders.ConsoleAppender\" }\n\t\t\t},\n\t\t\t// Root Logger\n\t\t\troot = { levelmax=\"INFO\", appenders=\"*\" },\n\t\t\t// Implicit Level Categories\n\t\t\tinfo = [ \"coldbox.system\" ]\n\t\t};\n\n\t\t/ Layout Settings\n\t\tlayoutSettings = {\n\t\t\tdefaultLayout = \"\",\n\t\t\tdefaultView   = \"\"\n\t\t};\n\n\t\t// Interceptor Settings\n\t\tinterceptorSettings = {\n\t\t\tcustomInterceptionPoints = \"\"\n\t\t};\n\n\t\t// Register interceptors as an array, we need order\n\t\tinterceptors = [\n\t\t];\n\n\t\t// Module Settings\n\t\tmoduleSettings = {\n\n\t\t};\n\n\t\t/*\n\t\t\t// flash scope configuration\n\t\t\tflash = {\n\t\t\t\tscope = \"session,client,cluster,ColdboxCache,or full path\",\n\t\t\t\tproperties = {}, // constructor properties for the flash scope implementation\n\t\t\t\tinflateToRC = true, // automatically inflate flash data into the RC scope\n\t\t\t\tinflateToPRC = false, // automatically inflate flash data into the PRC scope\n\t\t\t\tautoPurge = true, // automatically purge flash data for you\n\t\t\t\tautoSave = true // automatically save flash scopes at end of a request and on relocations.\n\t\t\t};\n\n\t\t\t//Conventions\n\t\t\tconventions = {\n\t\t\t\thandlersLocation = \"handlers\",\n\t\t\t\tpluginsLocation  = \"plugins\",\n\t\t\t\tviewsLocation \t = \"views\",\n\t\t\t\tlayoutsLocation  = \"layouts\",\n\t\t\t\tmodelsLocation \t = \"model\",\n\t\t\t\teventAction \t = \"index\"\n\t\t\t};\n\n\t\t*/\n\n\t}\n\n\t/**\n\t * Dev environment\n\t */\n\tfunction development(){\n\t\tcoldbox.customErrorTemplate = \"/coldbox/system/includes/BugReport.cfm\";\n\t}\n\t\n}\n",
		"description": "ColdBox Configuration File (Coldbox.cfc)",
		"scope": "source,text"
	},
	"entity": {
		"prefix": "entity",
		"body": "\n/**\n * A cool ${1:EntityName} entity\n */\ncomponent persistent=\"true\" table=\"${2:TableName}\"{\n\n\t// Primary Key\n\tproperty name=\"id\" fieldtype=\"id\" column=\"id\" generator=\"${3:native}\";\n\t\n\t// Properties\n\t${0}\n\t\n\t// Mementifier\n\tthis.memento = {\n\t\tdefaultIncludes = [ ],\n\t\tdefaultExcludes = [ ],\n\t\tneverInlucde \t= [ ]\n\t};\n\t\n\t/**\n\t * Constructor\n\t */\n\tfunction init(){\n\t\treturn this;\n\t}\n}\n\n",
		"description": "Create an ORM Entity",
		"scope": "source,text"
	},
	"ormservice": {
		"prefix": "ormservice",
		"body": "\n/**\n * A ColdBox Generic ORM entity service\n */\ncomponent extends=\"cborm.models.BaseORMService\" singleton{\n\t\n\t/**\n\t * Constructor\n\t */\n\tfunction init(){\n\t\t\n\t\t// init super class\n\t\tsuper.init();\n\t\t\n\t\t// Use Query Caching\n\t    setUseQueryCaching( ${1:false} );\n\t    // Query Cache Region\n\t    setQueryCacheRegion( '${2:query.region}' );\n\t    // EventHandling\n\t    setEventHandling( ${3:true} );\n\t    \n\t    ${0}\n\n\t    return this;\n\t}\n\t\n}\n",
		"description": "Create a ColdBox Generic ORM Entity Service",
		"scope": "source,text"
	},
	"virtualservice": {
		"prefix": "virtualservice",
		"body": "\n/**\n * A ColdBox Enabled virtual entity service\n */\ncomponent extends=\"cborm.models.VirtualEntityService\" singleton{\n\t\n\t/**\n\t * Constructor\n\t */\n\tfunction init(){\n\t\t\n\t\t// init super class\n\t\tsuper.init( entityName=\"${1:Entityname}\" );\n\t\t\n\t\t// Use Query Caching\n\t    setUseQueryCaching( ${2:false} );\n\t    // Query Cache Region\n\t    setQueryCacheRegion( '${3:query.${1}}' );\n\t    // EventHandling\n\t    setEventHandling( ${4:true} );\n\t    \n\t    ${0}\n\n\t    return this;\n\t}\n\t\n}\n",
		"description": "Create a ColdBox Virtual Entity Service",
		"scope": "source,text"
	},
	"action": {
		"prefix": "action",
		"body": "\n/**\n * ${1:index}\n */\nfunction ${1:index}( event, rc, prc ){\n\t${0}\n\tevent.setView( \"${TM_FILENAME/\\.cfc//}/${1}\" );\n}\n",
		"description": "Handler Action",
		"scope": "source,text"
	},
	"aspect": {
		"prefix": "aspect",
		"body": "\n/**\n* ${1:My AOP Aspect}\n**/\ncomponent implements=\"coldbox.system.aop.MethodInterceptor\" accessors=\"true\"{\n\t\n\t/**\n\t* Constructor\n\t*/\n\tfunction init(){\n\t\treturn this;\t\t\n\t}\n\t\n\t/**\n\t* The AOP method invocation\n\t*/\n\tany function invokeMethod(invocation) output=false{\n\t\t\n\t\t// proceed invocation\n\t\treturn arguments.invocation.proceed();\n\t}\n    \t\n}\n",
		"description": "WireBox AOP Aspect",
		"scope": "source,text"
	},
	"around": {
		"prefix": "around",
		"body": "\n/**\n * Executes an around handler\n */\nfunction aroundHandler( event, rc, prc, targetAction, eventArguments ){\n\t// Prepare action arguments\n\tvar args = { event = arguments.event, rc = arguments.rc, prc = arguments.prc };\n\tstructAppend( args, arguments.eventArguments );\n\t// Execute targeted action\n\tvar results = arguments.targetAction( argumentCollection=args );\n\t// Return results if they exist\n\tif( !isNull( results ) ){\n\t\treturn results;\n\t}\n}\n",
		"description": "AroundHandler action",
		"scope": "source,text"
	},
	"box": {
		"prefix": "box",
		"body": "\n{\n    \"name\":\"${1:My Application}\",\n    \"slug\":\"${2:myslug}\",\n    \"version\":\"${3:1.0.0}\",\n    \"author\":\"${4}\",\n    \"shortDescription\":\"${5}\",\n    \"location\":\"\",\n    \"directory\":\"\",\n    \"createPackageDirectory\":true,\n    \"packageDirectory\":\"\",\n    \"homepage\":\"\",\n    \"documentation\":\"\",\n    \"repository\":{\n        \"type\":\"\",\n        \"url\":\"\"\n    },\n    \"bugs\":\"\",\n    \"description\":\"\",\n    \"instructions\":\"\",\n    \"changelog\":\"\",\n    \"type\":\"\",\n    \"keywords\":[\n        \n    ],\n    \"private\":false,\n    \"engines\":[\n        {\n            \"type\":\"\",\n            \"version\":\"\"\n        }\n    ],\n    \"defaultEngine\":\"\",\n    \"defaultPort\":0,\n    \"projectURL\":\"\",\n    \"license\":[\n        {\n            \"type\":\"\",\n            \"url\":\"\"\n        }\n    ],\n    \"contributors\":[\n        \n    ],\n    \"dependencies\":{\n        \n    },\n    \"devDependencies\":{\n        \n    },\n    \"installPaths\":{\n        \n    },\n    \"ignore\":[\n        \n    ],\n    \"testbox\":{\n        \"runner\":[\n            {\n                \"default\":\"\"\n            }\n        ],\n        \"labels\":[\n            \n        ],\n        \"reporter\":\"\",\n        \"reporterResults\":\"\",\n        \"bundles\":[\n            \"\"\n        ],\n        \"directory\":{\n            \"mapping\":\"\",\n            \"recurse\":true\n        },\n        \"watchers\":[\n            \n        ],\n        \"notify\":{\n            \"emails\":[\n                \n            ],\n            \"growl\":\"\",\n            \"url\":\"\"\n        }\n    }\n}\n",
		"description": "Box.json Package Descriptor",
		"scope": "source,text,json"
	},
	"cfc": {
		"prefix": "cfc",
		"body": "\n/**\n * ${1:index}\n */\ncomponent accessors=\"true\"{\n\n\t/**\n\t * Constructor\n\t */\n\tfunction init(){\n\n\t\treturn this;\n\t}\n\n}\n",
		"description": "Script Component",
		"scope": "source,text"
	},
	"binder": {
		"prefix": "binder",
		"body": "\n/**\n* WireBox Configuration Object\n*/\ncomponent extends=\"coldbox.system.ioc.config.Binder\"{\n\t/**\n\t* Configure WireBox, that's it!\n\t*/\n\tfunction configure(){\n\t\t\n\t\t// The WireBox configuration structure DSL\n\t\twireBox = {\n\t\t\t// Scope registration, automatically register a wirebox injector instance on any CF scope\n\t\t\t// By default it registeres itself on application scope\n\t\t\tscopeRegistration = {\n\t\t\t\tenabled = true,\n\t\t\t\tscope   = \"application\", // server, cluster, session, application\n\t\t\t\tkey\t\t= \"wireBox\"\n\t\t\t},\n\n\t\t\t// DSL Namespace registrations\n\t\t\tcustomDSL = {\n\t\t\t\t// namespace = \"mapping name\"\n\t\t\t},\n\t\t\t\n\t\t\t// Custom Storage Scopes\n\t\t\tcustomScopes = {\n\t\t\t\t// annotationName = \"mapping name\"\n\t\t\t},\n\t\t\t\n\t\t\t// Package scan locations\n\t\t\tscanLocations = [],\n\t\t\t\n\t\t\t// Stop Recursions\n\t\t\tstopRecursions = [],\n\t\t\t\n\t\t\t// Parent Injector to assign to the configured injector, this must be an object reference\n\t\t\tparentInjector = \"\",\n\t\t\t\n\t\t\t// Register all event listeners here, they are created in the specified order\n\t\t\tlisteners = [\n\t\t\t\t// { class=\"\", name=\"\", properties={} }\n\t\t\t]\t\t\t\n\t\t};\n\t\t\n\t\t// Map Bindings below\n\t\t${0}\n\n\t}\t\n\n}\n",
		"description": "WireBox Configuration Object",
		"scope": "source,text"
	},
	"function": {
		"prefix": "function",
		"body": "\n/**\n * ${1:index}\n */\nfunction ${1:}(){\n\n}\n",
		"description": "Script Function",
		"scope": "source,text"
	},
	"handler": {
		"prefix": "handler",
		"body": "\n/**\n * ${1:My Event Handler Hint}\n */\ncomponent extends=\"coldbox.system.EventHandler\"{\n\t\n\t// OPTIONAL HANDLER PROPERTIES\n\tthis.prehandler_only \t= \"\";\n\tthis.prehandler_except \t= \"\";\n\tthis.posthandler_only \t= \"\";\n\tthis.posthandler_except = \"\";\n\tthis.aroundHandler_only = \"\";\n\tthis.aroundHandler_except = \"\";\t\t\n\n\t// REST Allowed HTTP Methods Ex: this.allowedMethods = {delete='POST,DELETE',index='GET'}\n\tthis.allowedMethods = {};\n\t\n\t/**\n\tIMPLICIT FUNCTIONS: Uncomment to use\n\tfunction preHandler( event, rc, prc, action, eventArguments){}\n\tfunction postHandler( event, rc, prc, action, eventArguments){}\n\tfunction aroundHandler( event, rc, prc, targetAction, eventArguments ){\n\t\t// executed targeted action\n\t\tvar args = { event = arguments.event, rc = arguments.rc, prc = arguments.prc };\n\t\tstructAppend( args, arguments.eventArguments );\n\t\targuments.targetAction( argumentCollection=args );\n\t}\n\tfunction onMissingAction( event, rc, prc, missingAction, eventArguments ){\n\t}\n\tfunction onError( event, rc, prc, faultAction, exception, eventArguments ){\n\t}\n\tfunction onInvalidHTTPMethod( event, rc, prc, faultAction, eventArguments ){\n\t}\n\t*/\n\n\t/**\n\t * Index\n\t */\n\tany function index( event, rc, prc ){\n\t\t${0}\n\t}\n\t\n}\n",
		"description": "ColdBox Event Handler",
		"scope": "source,text"
	},
	"inject": {
		"prefix": "inject",
		"body": "\nproperty name=\"${1}\" inject=\"${2}\";\n",
		"description": "Script Property Injection",
		"scope": "source,text"
	},
	"testaction": {
		"prefix": "testaction",
		"body": "\nit( \"${1:}\", function(){\n\tvar event \t= this.request( ${2:main.index}, {} );\n\tvar rc \t\t= event.getCollection();\n\tvar prc \t= event.getPrivateCollection();\n\n});\n",
		"description": "ColdBox Integration Test Case",
		"scope": "source,text"
	},
	"integrationTest": {
		"prefix": "integrationTest",
		"body": "\n/*******************************************************************************\n*\tIntegration Test as BDD (CF10+ or Railo 4.1 Plus)\n*\n*\tExtends the integration class: coldbox.system.testing.BaseTestCase\n*\n*\tso you can test your ColdBox application headlessly. The 'appMapping' points by default to\n*\tthe '/root' mapping created in the test folder Application.cfc.  Please note that this\n*\tApplication.cfc must mimic the real one in your root, including ORM settings if needed.\n*\n*\tThe 'execute()' method is used to execute a ColdBox event, with the following arguments\n*\t* event : the name of the event\n*\t* private : if the event is private or not\n*\t* prePostExempt : if the event needs to be exempt of pre post interceptors\n*\t* eventArguments : The struct of args to pass to the event\n*\t* renderResults : Render back the results of the event\n*******************************************************************************/\ncomponent extends=\"coldbox.system.testing.BaseTestCase\" appMapping=\"/root\"{\n\n\t/*********************************** LIFE CYCLE Methods ***********************************/\n\n\tfunction beforeAll(){\n\t\tsuper.beforeAll();\n\t\t// do your own stuff here\n\t}\n\n\tfunction afterAll(){\n\t\t// do your own stuff here\n\t\tsuper.afterAll();\n\t}\n\n/*********************************** BDD SUITES ***********************************/\n\n\tfunction run(){\n\n\t\tdescribe( \"Main Handler\", function(){\n\n\t\t\tbeforeEach(function( currentSpec ){\n\t\t\t\t// Setup as a new ColdBox request, VERY IMPORTANT. ELSE EVERYTHING LOOKS LIKE THE SAME REQUEST.\n\t\t\t\tsetup();\n\t\t\t});\n\n\t\t\tit( \"+homepage renders\", function(){\n\t\t\t\tvar event = execute( event=\"main.index\", renderResults=true );\n\t\t\t\texpect(\tevent.getValue( name=\"welcomemessage\", private=true ) ).toBe( \"Welcome to ColdBox!\" );\n\t\t\t});\n\n\t\t});\n\n\t}\n\n}\n",
		"description": "ColdBox Integration Test",
		"scope": "source,text"
	},
	"point": {
		"prefix": "point",
		"body": "\n/**\n * ${1} interception point\n */\nfunction ${1}( event, interceptData, buffer, rc, prc ){\n\t${0}\n}\n",
		"description": "ColdBox Interception Point",
		"scope": "source,text"
	},
	"interceptor": {
		"prefix": "interceptor",
		"body": "\n/**\n * ${1:My Interceptor Hint}\n */\ncomponent extends=\"coldbox.system.Interceptor\"{\n\t\n\t/**\n\t * Configure the interceptor\n\t */\n\tvoid function configure(){\n\t\t${0}\n\t}\n\n}\n",
		"description": "ColdBox Interceptor",
		"scope": "source,text"
	},
	"m2m": {
		"prefix": "m2m",
		"body": "\n// O2M -> ${1:Name}\nproperty \tname=\"${1:Name}\" \n\t\t\tfieldtype=\"many-to-many\" \n\t\t\ttype=\"array\" \n\t\t\tlazy=\"extra\" \n\t\t\torderby=\"${2:orderby}\" \n\t\t\tcascade=\"all\"\n\t\t  \tcfc=\"${3:cfc}\" \n\t\t  \tfkcolumn=\"${4:fk}\" \n\t\t  \tlinktable=\"${5:link_table}\" \n\t\t  \tinversejoincolumn=\"${6:inverse_join}\";\n",
		"description": "Creates a many-to-many property",
		"scope": "source,text"
	},
	"m2o": {
		"prefix": "m2o",
		"body": "\n// M2O -> ${1:Name}\nproperty \tname=\"${1:Name}\" \n\t\t\tcfc=\"${1:CFC}\" \n\t\t\tfieldtype=\"many-to-one\" \n\t\t\tfkcolumn=\"${2:fk}\" \n\t\t\tlazy=\"true\";\n",
		"description": "Creates a many-to-one property",
		"scope": "source,text"
	},
	"model": {
		"prefix": "model",
		"body": "\n/**\n * ${1:My Hint}\n */\ncomponent accessors=\"true\"{\n\t\n\t/**\n\t * Constructor\n\t */\n\tfunction init(){\n\t\t${0}\n\t\treturn this;\n\t}\n\t\n}\n",
		"description": "ColdBox Model Object",
		"scope": "source,text"
	},
	"o2m": {
		"prefix": "o2m",
		"body": "\n// O2M -> ${1:Name}\nproperty \tname=\"${1:Name}\" \n\t\t\tsingularName=\"${1:Name}\" \n\t\t\tfieldtype=\"one-to-many\" \n\t\t\ttype=\"array\" \n\t\t\tlazy=\"extra\" \n\t\t\tbatchsize=\"25\" \n\t\t\torderby=\"${2:orderBy}\"\n\t\t  \tcfc=\"${3:cfc}\" \n\t\t  \tfkcolumn=\"${4:fk}\" \n\t\t  \tinverse=\"true\" \n\t\t  \tcascade=\"all-delete-orphan\";\n",
		"description": "Creates a one-to-many property",
		"scope": "source,text"
	},
	"onerror": {
		"prefix": "onerror",
		"body": "\n/**\n * Executes when an exception occurs in this handler\n */\nfunction onError( event, rc, prc, faultAction, exception, eventArguments ){\n\t${0}\n}\n",
		"description": "OnError Action",
		"scope": "source,text"
	},
	"onhttp": {
		"prefix": "onhttp",
		"body": "\n/**\n * Executes when an invalid HTTP method is called\n */\nfunction onInvalidHTTPMethod( event, rc, prc, faultAction, eventArguments ){\n\t${0}\n}\n",
		"description": "OnInvalidHTTPMethod Action",
		"scope": "source,text"
	},
	"onma": {
		"prefix": "onma",
		"body": "\n/**\n * Executes when you execute an action that is missing\n */\nfunction onMissingAction( event, rc, prc, missingAction, eventArguments ){\n\t${0}\n}\n",
		"description": "OnMissingAction",
		"scope": "source,text"
	},
	"postaction": {
		"prefix": "postaction",
		"body": "\n/**\n * Executes after your '${1} action only\n */\nany function post${1}( event, rc, prc, eventArguments ){\n\t${0}\n}\n",
		"description": "Post{Action} action",
		"scope": "source,text"
	},
	"post": {
		"prefix": "post",
		"body": "\n/**\n * Executes after all handler actions\n */\nany function postHandler( event, rc, prc, action, eventArguments ){\n\t${0}\n}\n",
		"description": "PostHandler action",
		"scope": "source,text"
	},
	"preaction": {
		"prefix": "preaction",
		"body": "\n/**\n * Executes before your '${1} action only\n */\nany function pre${1}( event, rc, prc, eventArguments ){\n\t${0}\n}\n",
		"description": "Pre{Action} action",
		"scope": "source,text"
	},
	"pre": {
		"prefix": "pre",
		"body": "\n/**\n * Executes before all handler actions\n */\nany function preHandler( event, rc, prc, action, eventArguments ){\n\t${0}\n}\n",
		"description": "PreHandler action",
		"scope": "source,text"
	},
	"inject1": {
		"prefix": "inject",
		"body": "\nproperty name=\"${1}\" inject=\"${2:id}\";\n",
		"description": "Property Injection",
		"scope": "source,text"
	},
	"prop": {
		"prefix": "prop",
		"body": "\n/**\n * ${1}\n */\nproperty name=\"${1}\";\n",
		"description": "Script Property",
		"scope": "source,text"
	},
	"provider": {
		"prefix": "provider",
		"body": "\n/**\n* Provider of ${1:Provider} objects\n*/\nany function get${1} provider=\"${1}\"{}\n",
		"description": "Provider Method",
		"scope": "source,text"
	},
	"router": {
		"prefix": "router",
		"body": "\ncomponent{\n\n\tfunction configure(){\n\t\t// Set Full Rewrites\n\t\tsetFullRewrites( true );\n\n\t\t/**\n\t\t * --------------------------------------------------------------------------\n\t\t * App Routes\n\t\t * --------------------------------------------------------------------------\n\t\t *\n\t\t * Here is where you can register the routes for your web application!\n\t\t * Go get Funky!\n\t\t *\n\t\t */\n\n\t\t// A nice healthcheck route example\n\t\troute(\"/healthcheck\",function(event,rc,prc){\n\t\t\treturn \"Ok!\";\n\t\t});\n\n\t\t// A nice RESTFul Route example\n\t\troute( \"/api/echo\", function( event, rc, prc ){\n\t\t\treturn {\n\t\t\t\t\"error\" : false,\n\t\t\t\t\"data\" \t: \"Welcome to my awesome API!\"\n\t\t\t};\n\t\t} );\n\n\t\t// Conventions based routing\n\t\troute( \":handler/:action?\" ).end();\n\t}\n\n}\n",
		"description": "New ColdBox Router",
		"scope": "source,text"
	},
	"setter": {
		"prefix": "setter",
		"body": "\n/**\n* Setter injection for ${1:ID}\n*/\nvoid fuction set${1}(required ${1}) inject=\"id:${1}\"{\n\tvariables.${1} = arguments.${1};\n}\n",
		"description": "Setter Injection",
		"scope": "source,text"
	}
}